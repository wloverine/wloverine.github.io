<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>clashx白名单</title>
    <url>/2022/10/10/clashx%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<h1 id="clashx设置白名单"><a href="#clashx设置白名单" class="headerlink" title="clashx设置白名单"></a>clashx设置白名单</h1><p>在mac使用虚拟机虚拟了三台Linux服务器进行开发时，发现设置的host+port无法正常访问服务，而ip+port则可以正常访问。排查了虚拟机端的服务、防火墙设置、host配置以及本机host配置，均没有问题，然后当我退出代理软件后，host+port就可以正常访问了。查看log得知，本地的域名也走了代理，所以需要设置白名单，忽略本地的制定域名，在查询资料后找到了解决方法：</p>
<ul>
<li><p>打开终端，新建文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">vim ~/.config/clash/proxyIgnoreList.plist
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>输入以下内容</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>192.168.0.0/16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>10.0.0.0/8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>172.16.0.0/12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>127.0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>localhost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>*.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>*.crashlytics.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--上面的不要删，在下面添加你想要忽略的域名--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>hadoop201<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>hadoop202<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>hadoop203<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>编辑完成之后，重启clashx，之后打开系统偏好设置 &gt; 高级 &gt; 代理，查看 “忽略这些主机与域的代理设置”里有没有你设置的域名。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wloverine/PicGo/img/20221010184540.png" alt="image-20221010184540514"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次spark大表join问题</title>
    <url>/2019/08/23/my-first-blog/</url>
    <content><![CDATA[<h2 id="业务情景"><a href="#业务情景" class="headerlink" title="业务情景"></a>业务情景</h2><ul>
<li>两表根据一个key进行连接，一张表从hive中读取，数据量4千万，一张表从mongo中读取，数据量87万。起初，把小表直接进行广播变量，然后在大表的map算子里面根据key一条一条连接，这样速度很快。</li>
<li>后来小表数据源改变了，数据量上升到1千万，此时再用之前的方式去跑spark任务，效率低了很多。然后我把两个数据源的表都注册成临时表，写sparksql作连接，想看看这样和我之前的写法时间上差多少，结果，数据能成功跑完，但是spark任务在结束之后，报了错误：<pre><code>19/08/22 15:40:22 ERROR client.TransportResponseHandler: Still have 1 requests outstanding when connection from /192.168.2.12:56274 is closed
19/08/22 15:40:22 ERROR client.TransportClient: Failed to send RPC 4801162101817174823 to /192.168.2.14:43434: java.nio.channels.ClosedChannelException
java.nio.channels.ClosedChannelException
  at io.netty.channel.AbstractChannel$AbstractUnsafe.write(...)(Unknown Source)
19/08/22 15:40:22 INFO storage.BlockManagerInfo: Removed broadcast_8_piece0 on s2:39066 in memory (size: 809.3 KB, free: 5.2 GB)
19/08/22 15:40:22 WARN storage.BlockManagerMaster: Failed to remove broadcast 8 with removeFromMaster = true - Failed to send RPC 8112168140978160966 to /192.168.2.15:58680: java.nio.channels.ClosedChannelException
java.io.IOException: Failed to send RPC 8112168140978160966 to /192.168.2.15:58680: java.nio.channels.ClosedChannelException
</code></pre>
此时的spark任务已经结束，状态为success，并且最终join后的数据也成功入库了。<span id="more"></span></li>
<li>网上大部分的解决方案都是修改yarn-site.xml文件的两个参数，但是并没有奏效：<pre><code>&lt;property&gt;
  &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt;
  &lt;value&gt;false&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
  &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;
  &lt;value&gt;false&lt;/value&gt;
&lt;/property&gt;
</code></pre>
<h2 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h2>经过多次尝试，终于找到了两种方式可以解决此问题。</li>
</ul>
<ol>
<li>依然沿用之前的广播变量模式，不过不同的是，这次直接在spark里面，利用spark2.2之后的hint特性，显示指定join的方式:<br><code>select  /*+ broadcast(table)/ from ...</code><br> 这种方式会无视<code>spark.sql.autoBroadcastJoinThreshold    </code>默认的10M，对于两张表中较小的那张进行广播变量，如果广播变量超时了，记得将<code>spark.sql.broadcastTimeout</code>的时间设高一点，可以设为600，默认是300(单位是s)。这第一种方式可以成功解决上面的问题，并且spark任务的执行时间也要比自己手动广播变量进行map join要来的快(具体快的原因还不清楚，可能得益于sparksql的底层优化).</li>
<li>第二种方法，我这里将大表进行了repartition,分区数从原先的8100换成了300，然后再正常进行join，也没有报错，并且运行时间也和第一种方式差不多。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>本文的场景不是典型的大表join小表，更接近于大表join中表，两张表的数据量差异并不是特别大，而且广播变量的开销其实也不小，所以，在这种情况下，broadcast join和shuffle hash join的运行时间相差不大。</li>
<li>这里留了个疑问，为什么第二种方法，我repartition之后，两表进行join，就不会报错，难道两个分区数量相差很大的表连接就会产生这种错误吗？</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spark</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Guide</title>
    <url>/2019/11/26/hexo-guide/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><p><strong>Hexo拥有很多精美主题，我们用的是Next。</strong></p>
<h3 id="Next-各版本的仓库"><a href="#Next-各版本的仓库" class="headerlink" title="Next 各版本的仓库"></a>Next 各版本的仓库</h3><table>
<thead>
<tr>
<th>年份</th>
<th>版本</th>
<th>仓库</th>
</tr>
</thead>
<tbody><tr>
<td>2014 ~ 2017</td>
<td>v5</td>
<td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td>2018 ~ 2019</td>
<td>v6 ~ v7</td>
<td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td>2020</td>
<td>v8</td>
<td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<h3 id="Next与Hexo版本适配关系"><a href="#Next与Hexo版本适配关系" class="headerlink" title="Next与Hexo版本适配关系"></a>Next与Hexo版本适配关系</h3><p><img src="https://cdn.jsdelivr.net/gh/wloverine/PicGo/img/20211105133647.png" alt="image-20211105133645530"></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ul>
<li><p>代码地址（hexo相关配置在hexo分支上，发布分支是master）</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/wloverine/wloverine.github.io
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>本地运行 </p>
<pre class="line-numbers language-bash"><code class="language-bash">hexo s
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>发布到github</p>
<pre class="line-numbers language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo d
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>写新文章<br>进入博客主目录，输入以下命令</p>
<pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"新文章"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2></li>
</ul>
<h3 id="全局升级-Hexo-版本"><a href="#全局升级-Hexo-版本" class="headerlink" title="全局升级 Hexo 版本"></a>全局升级 Hexo 版本</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 清理NPM缓存</span>
$ <span class="token function">npm</span> cache clean -f

<span class="token comment" spellcheck="true"># 全局安装版本检测、版本升级工具</span>
$ <span class="token function">npm</span> <span class="token function">install</span> -g npm-check
$ <span class="token function">npm</span> <span class="token function">install</span> -g npm-upgrade

<span class="token comment" spellcheck="true"># 全局检测哪些模块可以升级，这里可以根据打印的提示信息，手动安装最新版本的模块</span>
$ npm-check -g

<span class="token comment" spellcheck="true"># 全局更新模块</span>
$ <span class="token function">npm</span> update -g

<span class="token comment" spellcheck="true"># 全局安装或更新Hexo的最新版本</span>
$ <span class="token function">npm</span> <span class="token function">install</span> --global hexo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="博客升级Hexo版本"><a href="#博客升级Hexo版本" class="headerlink" title="博客升级Hexo版本"></a>博客升级Hexo版本</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入博客的根目录</span>
$ <span class="token function">cd</span> /blog-root

<span class="token comment" spellcheck="true"># 检测Hexo哪些模块可以升级</span>
$ npm-check

<span class="token comment" spellcheck="true"># 删除package-lock.json</span>
<span class="token comment" spellcheck="true"># rm -rf package-lock.json</span>

<span class="token comment" spellcheck="true"># 更新package.json</span>
$ npm-upgrade

<span class="token comment" spellcheck="true"># 删除整个模块目录，这样可以避免很多坑</span>
$ <span class="token function">rm</span> -rf node_modules

<span class="token comment" spellcheck="true"># 更新Hexo的模块</span>
$ <span class="token function">npm</span> update --save

<span class="token comment" spellcheck="true"># 若出现依赖的问题，用以下命令检查一下，然后把报错的统一修复一下即可</span>
$ <span class="token function">npm</span> audix

<span class="token comment" spellcheck="true"># 或者强制更新</span>
$ <span class="token function">npm</span> update --save --force
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="升级Next主题"><a href="#升级Next主题" class="headerlink" title="升级Next主题"></a>升级Next主题</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入主题文件夹</span>
<span class="token function">cd</span> themes

<span class="token comment" spellcheck="true"># 备份旧版数据</span>
<span class="token function">mv</span> next next-bak

<span class="token comment" spellcheck="true"># 拉取新版本代码（由于已经将next主题文件夹内的配置文件分离到根目录，只需拉取代码完全替代老版代码即可，无需修改配置文件）</span>
<span class="token function">git</span> clone xxx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>蒜苔肉丝</title>
    <url>/2021/11/28/suantairousi/</url>
    <content><![CDATA[<div align="center"><img src="https://cdn.jsdelivr.net/gh/wloverine/PicGo/img/20211128003923.png" alt="image-20211128003343662" style="zoom: 45%;" /></div>

<span id="more"></span>

<blockquote>
<p>今天要做的这道菜是蒜苔肉丝，配上大米饭可谓是绝配了，十分的下饭。</p>
</blockquote>
<h2 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h2><ul>
<li>肉丝三两</li>
<li>蒜苔一捆</li>
</ul>
<h2 id="下锅前准备"><a href="#下锅前准备" class="headerlink" title="下锅前准备"></a>下锅前准备</h2><ol>
<li>将肉丝洗净挤干水分，放入碗中，碗中依次倒入少许盐、胡椒粉、料酒、老抽、玉米淀粉（为了让肉的口感更加嫩滑）、食用油、少许清水，然后拌匀，腌制备用。</li>
<li>蒜苔去头去尾，切成小段，用清水和食用小苏打清洗，捞出控干水分备用。</li>
<li>切少许生姜和蒜备用。</li>
</ol>
<h2 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h2><ol>
<li>起锅烧油，油温七成热，下入腌制好的肉丝以及姜蒜，煸出香味，待肉丝变色后捞出。</li>
<li>蒜苔下锅，并加入少许明油，中大火炒1min，之后加入肉丝，继续炒1min，再加入少许清水从锅边淋入，转至小火焖五分钟。五分钟后，开大火收汁，此时再加入适量的盐和生抽调味，继续收汁至汤汁浓稠状就可以出锅了。</li>
</ol>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>cook</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux cluster setup</title>
    <url>/2022/04/12/Linux-cluster-setup/</url>
    <content><![CDATA[<h1 id="搭建Linux集群"><a href="#搭建Linux集群" class="headerlink" title="搭建Linux集群"></a>搭建Linux集群</h1><ul>
<li>当前主力机是m1芯片的macbook pro，所以linux镜像用的是arm64位的centos7，虚拟机软件选用VMware Fusion。本次目标搭建三台虚拟机，实现网络互通。</li>
</ul>
<span id="more"></span>

<h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><ul>
<li>vmware</li>
<li>Centos7 arm64镜像</li>
<li>Royal TSX（用于管理SSH连接）</li>
</ul>
<h2 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h2><ol>
<li><p>直接把镜像拖入vmware，开始进行安装（不要选择最小化安装）。</p>
</li>
<li><p>正常开机之后，一般是无法正常联网，这个时候我们首先选择桥接模式的wifi模式，然后可以用<code>dhclient</code>来给当前虚拟机一个可用的动态ip，注意这个ip每次开机都会变化。也可以自己指定ip。</p>
</li>
<li><p>编辑网络配置文件</p>
<p>需要更改的地方是把BOOTPROTO=dhcp改为static，另外ONBOOT改为yes，然后添加IPADDR、NETMASK、GATEWAY、DNS1。网络可用的表现是虚拟机能正常上网，能和宿主机互相通信。</p>
<pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysconfig/network-scripts/ifcfg-ens160
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">TYPE</span><span class="token punctuation">=</span><span class="token attr-value">Ethernet</span>
<span class="token attr-name">PROXY_METHOD</span><span class="token punctuation">=</span><span class="token attr-value">none</span>
<span class="token attr-name">BROWSER_ONLY</span><span class="token punctuation">=</span><span class="token attr-value">no</span>
<span class="token attr-name">BOOTPROTO</span><span class="token punctuation">=</span><span class="token attr-value">static</span>
<span class="token attr-name">DEFROUTE</span><span class="token punctuation">=</span><span class="token attr-value">yes</span>
<span class="token attr-name">IPV4_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token attr-value">no</span>
<span class="token attr-name">IPV6INIT</span><span class="token punctuation">=</span><span class="token attr-value">yes</span>
<span class="token attr-name">IPV6_AUTOCONF</span><span class="token punctuation">=</span><span class="token attr-value">yes</span>
<span class="token attr-name">IPV6_DEFROUTE</span><span class="token punctuation">=</span><span class="token attr-value">yes</span>
<span class="token attr-name">IPV6_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token attr-value">no</span>
<span class="token attr-name">NAME</span><span class="token punctuation">=</span><span class="token attr-value">ens160</span>
<span class="token attr-name">UUID</span><span class="token punctuation">=</span><span class="token attr-value">60593f15-8470-433d-933c-c0a1cc25faa3</span>
<span class="token attr-name">DEVICE</span><span class="token punctuation">=</span><span class="token attr-value">ens160</span>
<span class="token attr-name">ONBOOT</span><span class="token punctuation">=</span><span class="token attr-value">yes</span>
<span class="token attr-name">IPADDR</span><span class="token punctuation">=</span><span class="token attr-value">192.168.1.201</span>
<span class="token attr-name">NETMASK</span><span class="token punctuation">=</span><span class="token attr-value">255.255.255.0</span>
<span class="token attr-name">GATEWAY</span><span class="token punctuation">=</span><span class="token attr-value">192.168.1.1</span>
<span class="token attr-name">DNS1</span><span class="token punctuation">=</span><span class="token attr-value">119.29.29.29</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl restart network.service
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编辑hostname</p>
<pre class="line-numbers language-shell"><code class="language-shell">vim /etc/hostname
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编辑hosts</p>
<pre class="line-numbers language-shell"><code class="language-shell">vim /etc/hosts
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>关闭防火墙</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 临时关闭
systemctl stop firewalld
# 永久关闭
systemctl disable firewalld.service
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>至此，单台虚拟机就准备完毕，这个时候将其关机，然后创建完整克隆，然后再改下克隆机的ip，确保虚拟机之间可以互相通信。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>《双城之战》观后感</title>
    <url>/2021/11/21/shuangchengzhizhan/</url>
    <content><![CDATA[<div align="center"><img src="https://cdn.jsdelivr.net/gh/wloverine/PicGo/img/20211121221102.png" alt="image-20211121221100468" style="zoom: 80%;"  /></div>
<span id="more"></span>

<ul>
<li>作为一个s3就开始加入联盟的老玩家，已经在峡谷中征战上万场，但是对英雄的背景故事了解甚少，仅仅是通过英雄介绍能知道个大概。而最近拳头出品的动画电影，更是让我对其中的英雄有了更深刻的了解。</li>
<li>先说说金克斯，金克斯是我比较喜欢的一个ad英雄，装备成型后打团十分舒适。我一直把金克斯当做英雄联盟版的小丑女，一个“疯子”。双城之战中，虽然交代了她从一个可爱的小女孩转变为一个小魔头的原因，但是个人感觉有点牵强。养父范德尔被希尔科害死，自己就因为姐姐蔚的一句责备就开始黑化加入希尔科一边，人设似乎太自私了点，最后还来了发究极死神飞弹直接炸出第二季。相比下来，蔚从始至终都要成熟懂事得多，而且一直很疼爱她的妹妹金克斯，并且作为少年小队的老大，很有责任感和担当</li>
<li>其他人物，比如杰斯、维克托的刻化都比较成功，维克托最后更是血肉苦弱，机械飞升，加入了光荣的进化，玩游戏的时候哪能想到三只手还有这样的背景故事。另外，剧中的原创人物希尔科也刻化的非常成功，有血有肉，在那个脏乱的下城黑巷中成为一代枭雄。</li>
<li>总体来说，这部作品的第一季还是相当不错的，拳头不愧是做电影的公司，期待第二部的到来。</li>
</ul>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>观后感</tag>
      </tags>
  </entry>
</search>
